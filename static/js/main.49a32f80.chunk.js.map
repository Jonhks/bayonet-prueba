{"version":3,"sources":["Components/Menu/Menu.js","Components/Footer/Footer.js","Components/Loading/Loading.js","Components/Cards/Cards.js","Components/Principales/Principales.js","Components/Grafica/Grafica.js","pages/home.js","hook/useFetch.js","pages/actividad.js","pages/error404.js","serviceWorker.js","index.js","App.js"],"names":["className","theme","mode","defaultSelectedKeys","style","lineHeight","Item","key","to","Footer","Layout","size","props","repo","console","log","lenguaje","language","background","padding","title","full_name","bordered","width","owner","login","score","data","items","map","id","span","Cards","url","options","useState","loading","setLoading","result","setResult","error","setError","useEffect","a","fetch","res","json","useFetch","Grafica","status","subTitle","extra","type","Boolean","window","location","hostname","match","ReactDOM","render","Header","Content","zIndex","path","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kWASe,G,OAAA,WACb,OACE,yBAAKA,UAAU,YACb,yBAAKA,UAAU,mBAGf,kBAAC,IAAD,CAAMC,MAAM,OACVC,KAAK,aACLC,oBAAqB,CAAC,KACtBC,MAAO,CAACC,WAAY,SAEtB,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAI,KAAV,SAEF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,GAAI,cAAV,kB,gBCnBO,G,OAAA,WAAO,IACZC,EAAWC,IAAXD,OACR,OACE,kBAACA,EAAD,CAAQT,UAAU,UAChB,sD,SCHS,G,OAAA,WACb,OACE,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAMW,KAAK,UACX,6C,SCLS,WAACC,GAAW,IACjBC,EAASD,EAATC,KACRC,QAAQC,IAAIF,GACZ,IAAMG,EAAWH,EAAKI,UAAY,eAClC,OACE,yBAAKb,MAAO,CAAEc,WAAY,UAAWC,QAAS,SAC5C,kBAAC,IAAD,CAAMC,MAAOP,EAAKQ,UAAWC,UAAU,EAAOlB,MAAO,CAAEmB,MAAO,MAC5D,uCAAaV,EAAKW,MAAMC,OACxB,wCAAcT,GACd,qCAAWH,EAAKa,UCRT,G,OAAA,SAACd,GAEd,OAD6BA,EAArBe,KAAQC,MACHC,KAAI,SAAAhB,GAAI,OACjB,kBAAC,IAAD,CAAKN,IAAKM,EAAKiB,GAAIC,KAAM,EAAG/B,UAAU,aACpC,kBAACgC,EAAD,CAAOnB,KAAMA,U,4CCNN,WAACD,GAAW,IACjBe,EAASf,EAATe,KACR,OACE,oCACE,kBAAC,IAAD,CAAUA,KAAMA,MCEN,aAGd,IACMA,ECZO,SAACM,EAAKC,GAAa,IAAD,EACDC,oBAAS,GADR,mBACxBC,EADwB,KACfC,EADe,OAEHF,mBAAS,MAFN,mBAExBG,EAFwB,KAEhBC,EAFgB,OAGLJ,mBAAS,MAHJ,mBAGxBK,EAHwB,KAGjBC,EAHiB,KAkB/B,OAbAC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,+EAEqBC,MAAMX,EAAKC,GAFhC,cAESW,EAFT,gBAGsBA,EAAIC,OAH1B,OAGSA,EAHT,OAIGP,EAAUO,GACVT,GAAW,GALd,kDAOGI,EAAS,EAAD,IACRJ,GAAW,GARd,yDAAD,KAWC,CAACH,EAASD,IACN,CAACG,UAASE,SAAQE,SDPPO,CAAS,sEACJT,OAEvB,OACAX,EACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKI,KAAM,IACT,kBAACiB,EAAD,CAASrB,KAAMA,MAGnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKI,KAAM,IACT,kBAAC,EAAD,CAAaJ,KAAMA,MAGvB,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAKI,KAAM,IAAI,kBAAC,EAAD,QE5BH,aAGd,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKA,KAAM,IAAX,aAGA,kBAAC,IAAD,CAAKA,KAAM,IAAX,cAIF,kBAAC,EAAD,Q,kBCXS,aACX,OAAO,kBAAC,IAAD,CACP/B,UAAU,qBACViD,OAAO,MACP7B,MAAM,MACN8B,SAAS,8CACPC,MAAQ,kBAAC,IAAD,CAAM3C,GAAI,KAAV,IAAe,kBAAC,IAAD,CAAQ4C,KAAK,WAAb,aCATC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OAAO,mBCOD,WAAgB,IACtBC,EAAmBlD,IAAnBkD,OAAQC,EAAWnD,IAAXmD,QACf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACC,kBAACD,EAAD,CAAQxD,MAAO,CAAE0D,OAAQ,IACvB,kBAAC,EAAD,OAEH,kBAACD,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,IAAIC,OAAO,GACrB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,aAAaC,OAAO,GAC9B,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,KACV,kBAAC,EAAD,aDxBI,MAASE,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.49a32f80.chunk.js","sourcesContent":["import React from 'react';\nimport {Menu} from 'antd'\nimport {Link} from 'react-router-dom'\n// import {ReactComponent as Logo} from '../../assets/img/logo.svg'\n\n\nimport './Menu.sass'\n\n\nexport default () => {\n  return (\n    <div className=\"menu-top\">\n      <div className=\"menu-top__logo\">\n        {/* <Logo /> */}\n      </div>\n      <Menu theme=\"dark\" \n        mode=\"horizontal\"\n        defaultSelectedKeys={[\"1\"]}\n        style={{lineHeight: \"64px\"}}\n      >\n      <Menu.Item key=\"1\">\n        <Link to =\"/\">Home</Link>\n      </Menu.Item>\n      <Menu.Item key=\"2\">\n        <Link to =\"/actividad\">Actividad</Link>\n      </Menu.Item>\n      </Menu>\n    </div>\n  )\n}\n\n\n","import React from 'react';\nimport { Layout } from 'antd'\n \nimport './Footer.sass'\n\nexport default () => {\n  const { Footer } = Layout\n  return (\n    <Footer className=\"footer\">\n      <p> Bayonet Github-Api </p>\n    </Footer>\n  )\n}","import React from 'react';\nimport { Spin } from 'antd'\n\nimport './Loading.sass'\n\n\nexport default () => {\n  return (\n    <div className=\"loading\"> \n      <Spin size=\"large\"/>\n      <p>Cargando...</p>\n    </div>\n  )\n}","import React from 'react'\nimport { Card } from 'antd';\n\n\n\nexport default (props) => {\n  const { repo } = props\n  console.log(repo)\n  const lenguaje = repo.language || \"Sin lenguaje\"\n  return (\n    <div style={{ background: '#ECECEC', padding: '20px' }}>\n      <Card title={repo.full_name} bordered={false} style={{ width: 300 }}>\n        <p>Usuario: {repo.owner.login}</p>\n        <p>Lenguaje: {lenguaje}</p>\n        <p>Score: {repo.score}</p>\n      </Card>\n    </div>\n  )\n}","import React from 'react'\nimport { Col, Row } from 'antd'\nimport Cards from '../Cards'\n\nimport './Principales.sass'\n\nexport default (props) => {\n  const { data: { items } }  = props\n  return items.map(repo=>(\n      <Col key={repo.id} span={8} className=\"card-repo\">\n        <Cards repo={repo} />\n      </Col>\n  ))\n\n}","import React from 'react'\nimport { Doughnut, Bar } from 'react-chartjs-2';\n\n\nexport default (props) => {\n  const { data } = props\n  return (\n    <>\n      <Doughnut data={data} />\n        {/* <Bar\n          data={data}\n          width={100}\n          height={50}\n          options={{ maintainAspectRatio: false }}\n        /> */}\n    </>\n  )\n}","import React,{useState, useEffect} from 'react';\nimport { Row, Col } from 'antd'\nimport Footer from '../Components/Footer'\nimport Loading from '../Components/Loading'\nimport Principales from '../Components/Principales'\nimport useFetch from '../hook/useFetch'\nimport Grafica from '../Components/Grafica'\n\n\n\nexport default  () => {\n\n  // const bestRepos = useFetch('https://api.github.com/search/repositories?q=language:javascript&sort=stars&order=desc')\n  const bestRepos = useFetch('https://api.github.com/search/repositories?q=sort=stars&order=desc')\n  const data = bestRepos.result\n \n  return (\n  data ? (\n    <>\n      <Row>\n        <Col span={24}>\n          <Grafica data={data} /> \n        </Col>\n      </Row>\n      <Row>\n        <Col span={24}>\n          <Principales data={data} />\n        </Col>\n      </Row>\n      <Footer />\n    </>\n  ) : (\n    <Col span={24}><Loading /></Col>\n    )\n    )\n    \n  }\n","import {useState, useEffect} from 'react'\n\nexport default (url, options) => {\n  const [loading, setLoading] = useState(true)\n  const [result, setResult] = useState(null)\n  const [error, setError] = useState(null)\n\n  useEffect(()=>{\n    (async() => {\n      try{\n        const res = await fetch(url, options)\n        const json = await res.json()\n        setResult(json)\n        setLoading(false)\n      } catch (err) { \n        setError(err)\n        setLoading(false)\n      }\n    })()\n  }, [options, url])\n  return {loading, result, error}\n}","import React from 'react'\nimport { Row, Col } from 'antd'\nimport Footer from '../Components/Footer'\n\nexport default  () => {\n\n\n  return (\n    <>\n      <Row>\n        <Col span={12}>\n          Actividad\n        </Col>\n        <Col span={12}>\n          Actividad\n        </Col>\n      </Row>\n      <Footer/>\n    </>\n  )\n}\n","import React from 'react';\nimport { Result, Button } from 'antd';\nimport {Link} from 'react-router-dom'\n\nimport '../index.css'\n\nexport default () => {\n    return <Result \n    className=\"error404-container\"\n    status=\"404\" \n    title=\"404\" \n    subTitle=\"Sorry, the page you visited does not exist.\"\n      extra={ <Link to =\"/\"> <Button type=\"primary\"> Home</Button></Link>}\n    />\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport {Layout} from 'antd'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\n// Componentes\nimport Menu from './Components/Menu'\n\n\n// Pages\nimport Home from './pages/home'\nimport Actividad from './pages/actividad'\nimport Error404 from './pages/error404'\n\n\n\nexport default function App() {\n  const {Header, Content} = Layout\n  return (\n    <Layout>\n      <Router>\n       <Header style={{ zIndex: 1 }}>\n         <Menu />\n       </Header>\n      <Content> \n        <Switch>\n          <Route path=\"/\" exact={true}>\n            <Home />\n          </Route>  \n          <Route path=\"/actividad\" exact={true}>\n            <Actividad />\n          </Route>        \n          <Route path=\"*\" >\n            <Error404 />\n          </Route>\n        </Switch>\n      </Content>\n      </Router>\n    </Layout>\n  );\n}\n\n\n"],"sourceRoot":""}